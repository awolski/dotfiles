#+TITLE: Emacs configuration file
#+AUTHOR: Tony Wolski
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt to
keep my =~/.config/emacs/= tidy, but still be able to keep it all in one file.
I aim to briefly explain all my configurations as I go along!

I would not recommend using this configuration /as-is/, because it probably
contains a lot you don't really need. I do, however, hope people find some
golden nuggets that they can smuggle into their own configs.

If you really do want to try this config out, this is how I'd go about it:

Clone the repo.
#+BEGIN_SRC sh :tangle no
git clone https://github.com/awolski/dot-emacs
#+END_SRC

Backup your old =~/.config/emacs= (if necessary).
#+BEGIN_SRC sh :tangle no
mv ~/.config/emacs ~/.config/emacs-bak
#+END_SRC

And finally
#+BEGIN_SRC sh :tangle no
mv dot-emacs ~/.config/emacs
#+END_SRC

On first run it should install a bunch of packages (this might take a while),
and you might have to restart your Emacs the first time. If you experience
bugs, please let me know!

** Resources

- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]]
- [[https://github.com/larstvei/dot-emacs/blob/main/init.org][larstvei/dot-emacs]]

* Meta

All changes to the configuration should be done in =init.org=, *not* in
=init.el=. Any changes in the =init.el= will be overwritten by saving
=init.org=. The =init.el= in this repo should not be tracked by git, and is
replaced the first time Emacs is started (assuming it has been renamed to
=~/.emacs.d=).

Emacs can't load =.org=-files directly, but =org-mode= provides functions to
extract the code blocks and write them to a file. There are multiple ways of
handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one could just use
=org-babel-load-file=, but I had problems with byte-compilation. Previously I
tracked both the =org.=- and =el.=-files, but the git commits got a little
messy. So here is a new approach.

When this configuration is loaded for the first time, the ~init.el~ is the file
that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
;; This file replaces itself with the actual configuration at first run.

;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

It tangles the org-file, so that this file is overwritten with the actual
configuration.

There is no reason to track the =init.el= that is generated; by running
the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start
tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC

I want lexical scoping for the init-file, which can be specified in the
header. The first line of the configuration is as follows:

#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

The =init.el= should (after the first run) mirror the source blocks in
the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
extracts the code blocks from the current file into a source-specific
file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to
the =after-save-hook= ensuring to always tangle and byte-compile the
=org=-document after changes.

#+BEGIN_SRC emacs-lisp
(require 'org)

(defun tangle-init ()
  "If the current buffer is \\='init.org\\=' the code-blocks are
   tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

I'd like to keep a few settings private, so we load a =private.el= if it
exists after the init-file has loaded.

#+BEGIN_SRC emacs-lisp
(add-hook
 'after-init-hook
 (lambda ()
   (let ((private-file (concat user-emacs-directory "private.el")))
     (when (file-exists-p private-file)
       (load-file private-file))
     (when custom-file
       (load-file custom-file))
     (server-start))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun aw/reload-emacs-configuration ()
  (interactive)
  (load-file (concat user-emacs-directory "init.el")))
#+END_SRC

* Packages

I use [[https://github.com/jwiegley/use-package][use-package]] to install and configure packages.

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)

  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (unless (assoc-default "nongnu" package-archives)
    (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t))
#+END_SRC

* Defaults

Set utf-8 as preferred coding system.

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC

Answering /yes/ and /no/ to each question from Emacs can be tedious, a
single /y/ or /n/ will suffice.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Appearance

I want as much screen real estate as possible so I turn off the menu bar and
tool bar.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
#+END_SRC

Change the color-theme to =modus-operandi=.

#+BEGIN_SRC emacs-lisp
(load-theme 'modus-vivendi t)
#+END_SRC

* Completion

[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI based on
the default completion system.

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

I want to see [[https://github.com/minad/marginalia][marginalia]] in the minibuffer.

#+BEGIN_SRC emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :after vertico
  :ensure t
  :init
  (marginalia-mode))
#+END_SRC

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    ;; (advice-add #'register-preview :override #'consult-register-window)
    ;; (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    ;; (setq xref-show-xrefs-function #'consult-xref
    ;;       xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )
#+end_src


* To Do

** Sane defaults

These are what /I/ consider to be saner defaults.

We can set variables to whatever value we'd like using =setq=.

#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1               ; Show keystrokes asap
      inhibit-startup-screen t          ; No splash screen please
      initial-scratch-message nil       ; Clean scratch buffer
      ring-bell-function 'ignore        ; Quiet
      scroll-margin 1                   ; Space between cursor and top/bottom
      sentence-end-double-space nil     ; No double space
      custom-file                       ; Customizations in a separate file
      (concat user-emacs-directory "custom.el"))
#+END_SRC

Some variables are buffer-local, so changing them using =setq= will only
change them in a single buffer. Using =setq-default= we change the
buffer-local variable's default value.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4                       ; Smaller tabs
                fill-column 79                    ; Maximum line width
                truncate-lines t                  ; Don't fold lines
                indent-tabs-mode nil              ; Use spaces instead of tabs
                split-width-threshold 160         ; Split verticly by default
                split-height-threshold nil        ; Split verticly by default
                frame-resize-pixelwise t          ; Fine-grained frame resize
                auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+END_SRC

* Document me

** Magit

[[https://magit.vc/][Magit]] is awesome. [[https://github.com/magit/forge][Forge]] is also.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-repository-directories `(("~/git" . 2))))

  (use-package forge
    :after magit)
#+END_sRC

** Password store

I use the /awesome/ [[https://www.passwordstore.org/][pass]], the standard unix password manager to GPG encrypt all
of my credentials, secrets and one time passwords.

#+BEGIN_SRC emacs-lisp
  (use-package pass)
  (auth-source-pass-enable)

  (use-package password-store)

  (setq auth-sources '(password-store)
        auth-source-debug t
        auth-source-do-cache t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :init
    (setq epg-pinentry-mode 'loopback)
    :config
    (if (not(process-live-p pinentry--server-process))
      (pinentry-start)))
#+END_SRC

** gptel

#+BEGIN_SRC emacs-lisp
  (use-package gptel
    :bind (;; C-c bindings in `mode-specific-map'
         ("C-c g" . gptel-send)))
#+END_SRC

** Emacs-libvterm

#+BEGIN_SRC emacs-lisp
  (use-package vterm)
  (use-package multi-vterm)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  ;; Optional: ag is nice alternative to using grep with Projectile
  (use-package ag
    :ensure t)

  ;; Optional: which-key will show you options for partially completed keybindings
  ;; It's extremely useful for packages with many keybindings like Projectile.
  (use-package which-key
    :ensure t
    :config
    (which-key-mode +1))

  (use-package projectile
    :ensure t
    :init
    (setq projectile-project-search-path '("~/git/"))
    :config
    ;; I typically use this keymap prefix on macOS
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    ;; On Linux, however, I usually go with another one
    (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
    (global-set-key (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
#+END_SRC

** Terraform

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    ;; if using straight
    ;; :straight t

    ;; if using package.el
    ;; :ensure t
    :custom (terraform-indent-level 2)
    :config
    (defun my-terraform-mode-init ()
      ;; if you want to use outline-minor-mode
      (outline-minor-mode 1)
      )
    (custom-set-variables '(terraform-format-on-save t))

    (add-hook 'terraform-mode-hook 'my-terraform-mode-init))
#+END_SRC

** Ledger

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :mode ("\\.ledger\\'" . ledger-mode)
    :init
    (setq ledger-default-project "~/git/org/ledger"  ;; Default project directory
          ledger-highlight-xact-under-point t  ;; Highlight transaction under point
          ledger-post-amount-alignment-column 70  ;; Align transactions
          ledger-reports '(("budget" "%(binary) -f %(ledger-file) bal assets:cash -X £ --strict --cleared")
                           ("net_worth" "%(binary) -f %(ledger-file) bal ^assets ^liabilities -X £ --strict --cleared --depth 2")
                           ("reconcile" "%(binary) -f %(ledger-file) reg %(account) --strict")
                           ("unknown_expenses" "%(binary) -f %(ledger-file) reg Expenses:Unknown --strict")
                           ("interest_wise" "%(binary) -f %(ledger-file) reg income:interest and @Wise\\ Interest")
                           ("interest_wise_aud" "%(binary) -f %(ledger-file) reg income:interest and @Wise\\ AUD\\ Interest")
                           ("monthly-average" "%(binary) -f %(ledger-file) reg %(account) --monthly --average --strict")
                           ("bal" "ledger [[ledger-mode-flags]] -f %(ledger-file) bal")
                           ("reg" "%(binary) -f %(ledger-file) reg")
                           ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
                           ("account" "%(binary) -f %(ledger-file) reg %(account)")
                           ))
    :config
    (setq ledger-fontify-headers t)  ;; Fontify headers
    (add-hook 'ledger-mode-hook
              (lambda ()
                (setq indent-tabs-mode nil  ;; Use spaces instead of tabs
                      tab-width 4))))  ;; Set tab width to 4
#+END_SRC

** Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :commands yas-minor-mode
  :init
  (yas-global-mode 1)  ;; Enable yasnippet globally
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"  ;; Default snippet directory
          ))
  :config
  (setq yas-trigger-key "TAB"  ;; Change the trigger key
        yas-prompt-functions '(yas-ido-prompt yas-completing-prompt))  ;; Use ido or completing-read for snippets
  (add-hook 'prog-mode-hook #'yas-minor-mode)  ;; Enable in programming modes
  (add-hook 'text-mode-hook #'yas-minor-mode)  ;; Enable in text modes
)    
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (global-company-mode 1)  ; Enable company mode globally
    (setq company-minimum-prefix-length 1)  ; Minimum prefix length before suggestions show
    (setq company-idle-delay 0.2) ; Delay before suggestions appear
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-tooltip-align-annotations t) ; Align annotations to the right
    (setq company-show-quick-access t) ; Show numbers in the tooltip
    (define-key company-active-map (kbd "TAB") 'company-complete) ; Tab for completion
    (define-key company-active-map (kbd "<tab>") 'company-complete) ; Tab for completion
    (define-key company-active-map (kbd "<return>") 'company-complete)) ; Return for completion
#+END_SRC

** Mu4e

#+BEGIN_SRC emacs-lisp
(require 'mu4e)

(require 'mu4e-org)
(require 'smtpmail)

(setq send-mail-function 'smtpmail-send-it
      smtpmail-debug-info t
      message-kill-buffer-on-exit t
      mu4e-get-mail-command "mbsync -a"
      ;; Prevent 'Maildir error: duplicate UID <id>' errors
      mu4e-change-filenames-when-moving t
      mu4e-attachment-dir "~/Downloads"
      ;; Only ask if a context hasn't been previously picked
      mu4e-compose-context-policy 'ask-if-none
      auth-source-debug t)

(setq mu4e-contexts
      (list
       ;; awolski.com account
       (make-mu4e-context
        :name "migadu"
        :match-func
        (lambda (msg)
          (when msg
            (string-prefix-p "/awolski.com" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address      . "tony@awolski.com")
                (user-full-name         . "Tony Wolski")
                (mu4e-compose-signature . "Tony\n\n\https://awol.ski")
                (smtpmail-smtp-user     . "tony@awolski.com")
                (smtpmail-smtp-server   . "smtp.migadu.com")
                (smtpmail-smtp-service  . 587)
                (smtpmail-stream-type   . starttls)
                (mu4e-drafts-folder     . "/awolski.com/Drafts")
                (mu4e-sent-folder       . "/awolski.com/Sent")
                (mu4e-refile-folder     . "/awolski.com/Archive")
                (mu4e-trash-folder      . "/awolski.com/Trash")))
       ))

(setq mu4e-maildir-shortcuts
      '(("/awolski.com/Inbox"   . ?i)
        ("/awolski.com/Archive" . ?a)
        ("/awolski.com/Sent"    . ?s)
        ("/awolski.com/Junk"    . ?j)
        ("/awolski.com/Trash"   . ?t)
        ("/fastmail/Inbox"      . ?f)
        ("/fastmail/Archive"    . ?g)
        ("/fastmail/Trash"      . ?h)))

;; Empty the initial bookmark list
(setq mu4e-bookmarks '())

;; All inboxes
(defvar inbox-folders (string-join '("maildir:/fastmail/INBOX"
                                     "maildir:/awolski.com/INBOX")
                                   " OR "))

;;   (add-to-list 'mu4e-bookmarks
;;                '(inbox-folders "Inbox" ?i))

;; Prevent mu4e from permanently deleting trashed items
;; This snippet was taken from the following article:
;; http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
(defun remove-nth-element (nth list)
  (if (zerop nth) (cdr list)
    (let ((last (nthcdr (1- nth) list)))
      (setcdr last (cddr last))
      list)))

(setq mu4e-marks (remove-nth-element 5 mu4e-marks))
(add-to-list 'mu4e-marks
             '(trash
               :char ("d" . "▼")
               :prompt "dtrash"
               :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
               :action (lambda (docid msg target)
                         (mu4e~proc-move docid
                                         (mu4e~mark-check-target target) "-N"))))


;; Close the message after I've sent it
(setq message-kill-buffer-on-exit t)
;; Don't ask for a 'context' upon opening mu4e
(setq mu4e-context-policy 'pick-first)
;; Don't ask to quit
(setq mu4e-confirm-quit nil)
#+END_SRC

** Ediff

#+BEGIN_SRC emacs-lisp
(setq ediff-keep-variants nil
      ediff-make-buffers-readonly-at-startup nil
      ediff-show-clashes-only t
      ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

** Org Mode

Activate Org Babel languages.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sql . t)
     (shell . t)))
#+END_SRC

Use the key bindings suggested in Org mode's [[https://orgmode.org/manual/Activation.html][activation]] document.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+END_SRC

Use sane defaults.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/git/org"
      org-agenda-files (list "~/git/peerj/org" org-directory)
      org-default-notes-file (concat org-directory "/refile.org")
      org-fold-catch-invisible-edits 'smart
      org-hierarchical-todo-statistics nil
      org-startup-folded t
      org-startup-indented t
      ;; org-duration-format 'h:mm  ;; assignment to free variable
      org-log-done t
      org-log-into-drawer "LOGBOOK"
      org-agenda-sticky t
      org-agenda-window-setup 'current-window)
#+END_SRC

Refiling...

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil
      org-refile-targets '((org-agenda-files :maxlevel . 9)))
#+END_SRC

Use Org Crypt.

#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))

(setq org-crypt-key "0x72CA03529FF0C81C")
;; GPG key to use for encryption.
;; nil means  use symmetric encryption unconditionally.
;; "" means use symmetric encryption unless heading sets CRYPTKEY property.

(setq auto-save-default nil)
;; Auto-saving does not cooperate with org-crypt.el: so you need to
;; turn it off if you plan to use org-crypt.el quite often.  Otherwise,
;; you'll get an (annoying) message each time you start Org
#+END_SRC

Keywords for todo states.

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "#e76f51" :weight bold)
              ("NEXT" :foreground "#289d8f" :weight bold)
              ("DONE" :foreground "#6b705c" :weight bold)
              ("WAITING" :foreground "#f4a261" :weight bold)
              ("HOLD" :foreground "#e9c46a" :weight bold)
              ("CANCELLED" :foreground "#6b705c" :weight bold)
              ("MEETING" :foreground "#00b4d8" :weight bold)
              ("PHONE" :foreground "#6b705c" :weight bold))))

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+end_src

Global column view.

#+begin_src emacs-lisp
; Set default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

; View project subtasks in clockreport mode with larger :maxlevel value (default is 2)
(setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 4))

; global Effort estimate values
; global STYLE property values for completion
(setq org-global-properties (quote (("Effort_ALL" . "0:05 0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 8:00 24:00 0:00")
                                    ("STYLE_ALL" . "habit"))))
#+end_src

Quick access to Org tags.

#+begin_src emacs-lisp
; Tags with fast selection keys
(setq org-tag-alist (quote ((:startgroup)
                            ("@bujo" . ?b)
                            ("@errand" . ?e)
                            ("@home" . ?H)
                            (:endgroup)
                            ("WAITING" . ?w)
                            ("HOLD" . ?h)
                            ("@phone" . ?p)
                            ("EIRA" . ?E)
                            ("BODHI" . ?B)
                            ("WORK" . ?W)
                            ("ORG" . ?O)
                            ("AWOLSKI" . ?N)
                            ("crypt" . ?c)
                            ("NOTE" . ?n)
                            ("CANCELLED" . ?C)
                            ("FLAGGED" . ??))))

; ALLOW SETTING SINGLE tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options t)
#+end_src

Let's test out [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]].

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t)

  (org-super-agenda-mode)

  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)

  (setq org-agenda-custom-commands
        '(
          ("i" "Inbox"
           ((agenda "" ((org-agenda-span 2))
                    ((org-super-agenda-groups
                      '((:name "Something"
                         :time-grid nil)))))

            (tags "REFILE" ((org-agenda-overriding-header "")
                            (org-super-agenda-groups
                             '((:name "Refile"
                                      :tag "REFILE")))))

            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(;;(:discard (:todo "HOLD"))
                            (:name "Estimate"
                                   :and (:children nil :not (:effort< "0:00" :effort> "0:00"))
                                   :order 1)
                            (:name "Context"
                                   :not (:tag ("@home" "@errand" "@bujo" "email"))
                                   :order 2)
                            ))))))
          ("h" "Holding Tank"
           ((agenda "" ((org-agenda-span 0))
                    ((org-super-agenda-groups
                      '((:name none
                         :time-grid nil)))))

            (alltodo "" ((org-agenda-overriding-header "")
                            (org-super-agenda-groups
                             '((:name "Hold"
                                      :tag "HOLD")
                               (:discard (:anything t))
                               ))))))

          ("f" "Focus"
           ((agenda "" ((org-agenda-span 0))
                    ((org-super-agenda-groups
                      '((:name none
                         :time-grid nil)))))

            (alltodo "" ((org-agenda-overriding-header "")
                            (org-super-agenda-groups
                             '((:name "Hold"
                                      :tag "HOLD")
                               (:discard (:anything t))
                               ))))))

          ("p" "Personal"
           ((agenda "" ((org-agenda-span 3))
                    ((org-super-agenda-groups
                      '((:name none
                               :time-grid t)))))

            (tags "REFILE" ((org-agenda-overriding-header "")
                            (org-super-agenda-groups
                             '((:name "Tasks to refile"
                                      :tag "REFILE")))))

            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:discard (:tag "WORK"
                                            :todo "HOLD"
                                            :scheduled t
                                            :deadline t
                                            :habit t))
                            (:name "Tasks to estimate"
                                   :and (:children nil :not (:effort< "0:00" :effort> "0:00"))
                                   :order 1)
                            (:name "Next to do"
                                   :todo "NEXT"
                                   :order 2)
                            (:name "Important"
                                   :priority "A"
                                   :order 3)
                            (:name "Stuck Projects"
                                   :and (:todo "TODO" :children t :not (:children "NEXT"))
                                   :order 4)
                            (:name "Errands"
                                   :and (:tag "@errand" :todo "TODO")
                                   :scheduled today
                                   :order 5)
                            (:name "Quick Picks"
                                   :and (:effort< "0:15" :todo "TODO")
                                   :scheduled today
                                   :order 6)
                            (:name "Projects"
                                   :and (:todo "TODO" :children t)
                                   :order 7)
  ;                          (:name "Home"
  ;                                 :and (:tag "@home" :todo "TODO")
  ;                                 :scheduled today
  ;                                 :order 8)
                            (:name "Waiting"
                                   :todo "WAITING"
                                   :order 10)
                            ))))))

          ("r" "Retrospective"
           ((tags "/DONE|CANCELLED" ((org-agenda-overriding-header "")
                                     (org-super-agenda-groups
                                      '((:name "Tasks to archive"
                                               :order 1)))))))

          ("j" "PeerJ"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today" :time-grid t
                                  :date today
                                  :todo "TODAY"
                                  :scheduled today
                                  :order 1)
                           (:discard (:not (:tag "PEERJ")))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:discard (:not (:tag ("PEERJ" "REFILE"))))
                            (:discard (:todo "HOLD"
                                       :tag "MEETING"))
                            (:name "Next to do"
                                   :todo "NEXT"
                                   :order 1)
                            (:name "Tasks to estimate"
                                   :and (:children nil :not (:effort< "0:00" :effort> "0:00"))
                                   :order 2)
                            (:name "Tasks to refile"
                                   :tag "REFILE"
                                   :order 3)
                            (:name "Quick Picks"
                                   :and (:effort< "0:15" :todo "TODO")
                                   :scheduled today
                                   :order 4)
                            (:name "Small tasks (effort< 2:00)"
                                   :and (:effort< "2:00" :todo "TODO")
                                   :scheduled today
                                   :order 5)
                            (:name "Medium tasks (effort< 4:00)"
                                   :and (:effort< "4:00" :todo "TODO")
                                   :scheduled today
                                   :order 6)
                            (:name "Stuck Projects"
                                   :and (:todo ("WAITING" "HOLD") :children todo)
                                   :order 7)
                            (:name "Project Tasks"
                                   :auto-parent t
                                   :order 8)
                            ))))))))
#+end_src

#+begin_src emacs-lisp
(setq org-use-fast-todo-selection t)
#+end_src

Capture templates for notes, todo etc.

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Task" entry (file org-default-notes-file)
         "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
        ("x" "Email Task" entry (file org-default-notes-file)
         "* TODO %:subject :EMAIL:\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
        ("c" "Call" entry (file org-default-notes-file)
         "* TODO Call %? :@mobile:\n%u\n" :clock-in t :clock-resume t)
        ("m" "Message" entry (file org-default-notes-file)
         "* TODO Message %? :@phone:\n:PROPERTIES:\n:Effort: 0:05\n:END:\n%u\n" :clock-in t :clock-resume t)
        ("r" "Respond" entry (file org-default-notes-file)
         "* NEXT Respond to %:from on %:subject :EMAIL:\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
        ("b" "Bookmark" entry (file org-default-notes-file)
         "* %? %(org-set-tags \"BOOKMARK\") \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
        ("n" "Note" entry (file  org-default-notes-file)
         "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("g" "Forge Topic" entry (file org-default-notes-file)
         "* TODO %:description\n%?\n%a\n%u\n" :clock-in t :clock-resume t)
        ("i" "Meeting" entry (file org-default-notes-file)
         "* MEETING %? :MEETING:\n%U" :clock-in t :clock-resume t)
        ("p" "Phone call" entry (file org-default-notes-file)
         "* PHONE Call with %? :PHONE:\n%U" :clock-in t :clock-resume t)
        ;("#" "used by gnus-icalendar-org" entry (file org-default-notes-file)
        ; "%i %?\n" :time-prompt t :clock-in t :clock-resume t)
        ("p" "PeerJ")
        ("pi" "Issue" entry (file+headline "~/git/peerj/org/peerj.org" "Tasks")
         "* TODO %:description\n%?\n%a\n%u\n" :clock-in t :clock-resume t)
        ("pc" "Meeting" entry (file+headline "~/git/peerj/org/peerj.org" "Meetings")
         "* MEETING Call with %? :MEETING:CALL:\n%T\n%U" :clock-in t :clock-resume t :time-prompt t)
        ("ps" "Stand up" entry (file+headline "~/git/peerj/org/peerj.org" "Meetings")
         "* MEETING PeerJ Stand up :MEETING:CALL:\n<pjsu%?\n\n%U" :clock-in t :clock-resume t :time-prompt t)
        ("pt" "Task" entry (file+headline "~/git/peerj/org/peerj.org" "Tasks")
         "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
        ))
#+end_src

Keybindings straight to capture templates.

#+begin_src emacs-lisp
;;(define-key global-map (kbd "C-c r")
;;  (lambda () (interactive) (org-capture nil "r")))
#+end_src

When editing org-files with source-blocks, we want the source blocks to be
themed as they would in their native mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)

(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
#+END_SRC

** Org CalDav

Use [[https://github.com/dengste/org-caldav][org-caldav]] for calendar synchronisation.

#+begin_src emacs-lisp
;(require 'org-caldav)
;
;;; URL of the caldav server
;(setq org-caldav-url "https://dav.awol.ski/tony/calendar/"
;      org-caldav-calendar-id ""
;      org-caldav-inbox "~/git/org/refile.org"
;      org-caldav-files '("~/git/org/simba.org")
;      org-icalendar-timezone "Europe/London")
#+end_src

** Tree Sitter

#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter-langs
    :ensure t
    :defer t)

  (use-package tree-sitter
    :ensure t
    :after tree-sitter-langs
    :config
    (global-tree-sitter-mode))
#+END_SRC

** PHP

;;#+BEGIN_SRC emacs-lisp
;;  (use-package php-ts-mode
;;    :
;;  (add-hook 'php-mode-hook 'eglot-ensure)
;;  (with-eval-after-load 'tree-sitter
;;     (add-to-list 'tree-sitter-major-mode-language-alist '(php-mode . php))))
;;#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** MacOS

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (use-package pbcopy
      :ensure t))
#+END_SRC

* License

My Emacs configurations written in Org mode.

Copyright (c) 2020 - 2025 Tony Wolski

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
